{"version":3,"sources":["../src/lib/index.ts"],"names":["patch"],"mappings":"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","file":"index.cjs","sourcesContent":["export type METHODS =\n  | \"GET\"\n  | \"POST\"\n  | \"PUT\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"OPTIONS\"\n  | \"TRACE\"\n  | \"HEAD\"\n  | \"CUSTOM\"\n  | string;\n\ntype DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type Hook = (\n  context: Readonly<Context>,\n) => Promise<DeepPartial<Context>> | void;\n\nexport type Context = {\n  config: Config;\n  request: {\n    method: METHODS;\n    url: string;\n    options: RequestOptions;\n  };\n  result: RequestResult | null;\n};\n\nexport type Config = {\n  baseUrl: string;\n  bearerToken: string | null;\n  timeout: number;\n  retry: boolean;\n  maxRetries: number;\n  startPolling: boolean;\n  stopPolling: boolean;\n  pollingInterval: number;\n  revalidateCache: number;\n  withCredentials: boolean;\n  withCache: boolean;\n  parseJson: boolean;\n  stringifyPayload: boolean;\n  mode: RequestMode;\n  headers: { [key: string]: string };\n  hooks: {\n    onRequest?: Hook;\n    onResponse?: Hook;\n  };\n};\n\nexport type RequestResult = {\n  loading: boolean;\n  error: { message: string; status: string | number } | null;\n  data: any;\n  response: Response | null;\n  refetch: (callback: (result: RequestResult) => void) => Promise<any>;\n  cancelRequest: () => void;\n  startPolling: (interval?: number) => void;\n  stopPolling: () => void;\n  onPollDataReceived: (callback: (result: RequestResult) => void) => void;\n};\n\nexport type RequestOptions = Omit<RequestInit, \"body\"> & {\n  body?: BodyInit | object | null;\n} & Partial<Config>;\n\nexport const defaultConfig: Config = {\n  baseUrl: \"\",\n  bearerToken: null,\n  timeout: 90000,\n  retry: false,\n  maxRetries: 3,\n  startPolling: false,\n  stopPolling: false,\n  pollingInterval: 5000,\n  revalidateCache: 10000,\n  withCredentials: false,\n  withCache: true,\n  parseJson: true,\n  stringifyPayload: true,\n  mode: \"cors\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"*/*\",\n  },\n  hooks: {},\n};\n\nlet config: Config = { ...defaultConfig };\n\nconst cache: Map<string, RequestResult> = new Map();\n\nasync function request(\n  url: string,\n  method: METHODS,\n  options: RequestOptions = { ...defaultConfig },\n): Promise<RequestResult> {\n  const abortController = new AbortController();\n  const { signal } = abortController;\n\n  let loading = true;\n  let error: { message: string; status: string | number } | null = null;\n  let data: any = null;\n  let retryCount = 0;\n\n  let fullUrl = config.baseUrl ? config.baseUrl + url : url;\n\n  const timeoutId = setTimeout(() => {\n    abortController.abort();\n    loading = true;\n    error = { message: \"Request timed out!\", status: \"TIMEOUT\" };\n  }, config.timeout);\n\n  const performRequest = async (): Promise<{\n    loading: boolean;\n    error: typeof error;\n    data: any;\n    response: Response | null;\n  }> => {\n    try {\n      let fetchOptions: any = {\n        signal,\n        method,\n        ...config,\n        ...options,\n        headers: { ...config.headers, ...(options.headers || {}) },\n      };\n\n      // console.log('fetch options', fetchOptions);\n\n      if (\n        config.stringifyPayload &&\n        fetchOptions.body &&\n        typeof fetchOptions.body === \"object\"\n      ) {\n        fetchOptions.body = JSON.stringify(fetchOptions.body);\n      }\n\n      if (options.baseUrl) {\n        fullUrl = options.baseUrl + url;\n      }\n\n      // console.log('log', fullUrl, fetchOptions);\n\n      const response = await fetch(fullUrl, fetchOptions);\n\n      if (!response.ok) {\n        error = { message: response.statusText, status: response.status };\n      } else {\n        data = config.parseJson ? await response.json() : await response.text();\n      }\n\n      clearTimeout(timeoutId);\n      loading = false;\n      return { loading, error, data, response };\n    } catch (err: any) {\n      error = { message: err.message, status: \"NETWORK_ERROR\" };\n      clearTimeout(timeoutId);\n      loading = false;\n      return { loading, error, data, response: null };\n    }\n  };\n\n  const refetch = async (\n    callback: (result: RequestResult) => void,\n  ): Promise<any> => {\n    const newData = await performRequest();\n    return callback({\n      ...newData,\n      refetch,\n      cancelRequest,\n      startPolling,\n      stopPolling,\n      onPollDataReceived,\n    });\n  };\n\n  // Check cache for GET requests\n  const cacheKey = `${method}:${fullUrl}`;\n  if (config.withCache && method === \"GET\" && cache.has(cacheKey)) {\n    setTimeout(() => {\n      performRequest().then((newResult) => {\n        if (!newResult.error) {\n          cache.set(cacheKey, {\n            ...newResult,\n            refetch,\n            cancelRequest,\n            startPolling,\n            stopPolling,\n            onPollDataReceived,\n          });\n        }\n      });\n    }, config.revalidateCache);\n    return cache.get(cacheKey)!;\n  }\n\n  const cancelRequest = (): void => {\n    abortController.abort();\n  };\n\n  let result = await performRequest();\n\n  while (config.retry && retryCount < config.maxRetries && result.error) {\n    retryCount++;\n    result = await performRequest();\n  }\n\n  let pollingIntervalId: any | null = null;\n  let pollCallback: ((result: RequestResult) => void) | null = null;\n\n  const stopPolling = (): void => {\n    if (pollingIntervalId) {\n      clearInterval(pollingIntervalId);\n      pollingIntervalId = null;\n    }\n  };\n\n  const onPollDataReceived = (\n    callback: (result: RequestResult) => void,\n  ): void => {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"onPollDataReceived callback must be a function\");\n    }\n    pollCallback = callback;\n    // Start polling if it was requested but delayed due to missing callback\n    if (config.startPolling && !pollingIntervalId) {\n      startPolling();\n    }\n  };\n\n  const startPolling = (interval: number = config.pollingInterval): void => {\n    if (!pollCallback) {\n      console.warn(\"Polling not started: onPollDataReceived callback not set\");\n      return;\n    }\n    if (pollingIntervalId) {\n      stopPolling(); // Clear existing interval if any\n    }\n    pollingIntervalId = setInterval(async () => {\n      try {\n        const newResult = await performRequest();\n        pollCallback!(newResult as RequestResult);\n        Object.assign(result, newResult);\n      } catch (pollError) {\n        console.error(\"Polling error:\", pollError);\n      }\n    }, interval);\n  };\n\n  // Cache successful GET requests\n  if (config.withCache && method === \"GET\" && !result.error) {\n    cache.set(cacheKey, {\n      ...result,\n      refetch,\n      cancelRequest,\n      startPolling,\n      stopPolling,\n      onPollDataReceived,\n    });\n  }\n\n  return {\n    ...result,\n    refetch,\n    cancelRequest,\n    startPolling,\n    stopPolling,\n    onPollDataReceived,\n  };\n}\n\n/**\n * Sends an HTTP GET request to the specified URL.\n *\n * @param url - The target URL to send the GET request to\n * @param options - Optional configuration options for the request\n * @returns A Promise that resolves to the request result\n *\n * @example\n * const result = await GET('https://api.example.com/resource');\n */\nexport function GET(\n  url: string,\n  options?: RequestOptions,\n): Promise<RequestResult> {\n  return request(url, \"GET\", options);\n}\n\n/**\n * Sends an HTTP POST request to the specified URL.\n *\n * @param url - The target URL to send the POST request to\n * @param options - Optional configuration options for the request\n * @returns A Promise that resolves to the request result\n *\n * @example\n * const result = await POST('https://api.example.com/resource', { body: { key: 'value' } });\n */\nexport function POST(\n  url: string,\n  options?: RequestOptions,\n): Promise<RequestResult> {\n  return request(url, \"POST\", options);\n}\n\n/**\n * Sends an HTTP PUT request to the specified URL.\n *\n * @param url - The target URL to send the PUT request to\n * @param options - Optional configuration options for the request\n * @returns A Promise that resolves to the request result\n *\n * @example\n * const result = await PUT('https://api.example.com/resource', { body: { key: 'value' } });\n */\nexport function PUT(\n  url: string,\n  options?: RequestOptions,\n): Promise<RequestResult> {\n  return request(url, \"PUT\", options);\n}\n\n/**\n * Sends an HTTP DELETE request to the specified URL.\n *\n * @param url - The target URL to send the DELETE request to\n * @param options - Optional configuration options for the request\n * @returns A Promise that resolves to the request result\n *\n * @example\n * const result = await DELETE('https://api.example.com/resource');\n */\nexport function DELETE(\n  url: string,\n  options?: RequestOptions,\n): Promise<RequestResult> {\n  return request(url, \"DELETE\", options);\n}\n\n/**\n * Sends an HTTP PATCH request to the specified URL.\n *\n * @param url - The target URL to send the PATCH request to\n * @param options - Optional configuration options for the request\n * @returns A Promise that resolves to the request result\n *\n * @example\n *\n * const result = await PATCH('https://api.example.com/resource', { body: { key: 'value' } });\n *\n */\nexport function PATCH(\n  url: string,\n  options?: RequestOptions,\n): Promise<RequestResult> {\n  return request(url, \"PATCH\", options);\n}\n\n// Additional HTTP methods\n\n/**\n * Sends an HTTP OPTIONS request to the specified URL.\n *\n * @param url - The target URL to send the OPTIONS request to\n * @param options - Optional configuration options for the request\n * @returns A Promise that resolves to the request result\n *\n * @example\n * ```ts\n * const result = await OPTIONS('https://api.example.com/resource');\n * ```\n */\nexport function OPTIONS(\n  url: string,\n  options?: RequestOptions,\n): Promise<RequestResult> {\n  return request(url, \"OPTIONS\", options);\n}\n\n/**\n * Sends a TRACE request to the specified URL.\n *\n * The TRACE method performs a message loop-back test along the path to the target resource.\n *\n * @param url - The URL to send the TRACE request to\n * @param options - Optional request configuration options\n * @returns A Promise that resolves to the response from the request\n * @throws {Error} If the request fails or network error occurs\n */\nexport function TRACE(\n  url: string,\n  options?: RequestOptions,\n): Promise<RequestResult> {\n  return request(url, \"TRACE\", options);\n}\n\n/**\n * Performs an HTTP HEAD request to the specified URL.\n *\n * @param url - The URL to send the HEAD request to\n * @param options - Optional configuration for the request\n * @returns A Promise that resolves with the response data\n *\n * @example\n * ```typescript\n * const result = await HEAD('https://api.example.com/resource');\n * ```\n */\nexport function HEAD(\n  url: string,\n  options?: RequestOptions,\n): Promise<RequestResult> {\n  return request(url, \"HEAD\", options);\n}\n\n/**\n * CUSTOM method allows you to specify any HTTP method.\n * @param {string} url - The URL to request\n * @param {string} method - The HTTP method (e.g. \"CONNECT\", \"CUSTOM\", etc.)\n * @param {RequestOptions} [options] - Additional options for the request\n * @returns {Promise<RequestResult>} The request result\n */\nexport function CUSTOM(\n  url: string,\n  method: string,\n  options?: RequestOptions,\n): Promise<RequestResult> {\n  return request(url, method, options);\n}\n\n/**\n * Creates a new Z-Fetch instance with custom configuration.\n *\n * @param instanceConfig - Optional configuration object to override default settings\n * @returns An object containing HTTP methods (get, post, etc.) and helper utilities\n *\n * @example\n * ```typescript\n * // Create a new instance with custom config\n * const api = createInstance({\n *   baseUrl: 'https://api.example.com',\n *   headers: { 'Content-Type': 'application/json' },\n *   hooks: {\n *     // Modify request before sending\n *     onRequest: (context) => {\n *       context.request.options.headers['X-Custom-Header'] = 'value';\n *       return context;\n *     },\n *\n *     // Modify response after receiving\n *     onResponse: (context) => {\n *       context.result.data = {\n *         ...context.result.data,\n *         customData: 'value'\n *       };\n *       return context;\n *     }\n *   }\n * });\n *\n * // Make HTTP requests\n * const data = await api.get('/users');\n *\n * // Use Helpers, eg. access instance configuration\n * const config = api.helpers.getConfig();\n * ```\n */\nexport function createInstance(instanceConfig: Partial<Config> = {}) {\n  const instanceConfigWithDefaults = { ...defaultConfig, ...instanceConfig };\n  const { onRequest, onResponse } = instanceConfigWithDefaults.hooks || {};\n\n  const interceptor = async (\n    method: METHODS,\n    url: string,\n    options: RequestOptions,\n  ): Promise<RequestResult | null> => {\n    let context: Context = {\n      config: instanceConfigWithDefaults,\n      request: {\n        method,\n        url,\n        options: { ...instanceConfigWithDefaults, ...options },\n      },\n      result: null,\n    };\n\n    const applyPatch = (original: Context, patch?: DeepPartial<Context>) => {\n      if (!patch) return original;\n      return {\n        ...original,\n        ...patch,\n        request: {\n          ...original.request,\n          ...patch.request,\n        },\n        result: patch.result ?? original.result,\n      } as Context;\n    };\n\n    // console.log('context log before::', context.request.options);\n    if (onRequest) {\n      const patch = await onRequest(context);\n      if (patch) {\n        context = applyPatch(context, patch);\n      }\n    }\n\n    // console.log('context log after::', context.request.options);\n\n    const result = await request(\n      context.request.url,\n      context.request.method,\n      context.request.options,\n    );\n\n    context.result = result;\n\n    if (onResponse) {\n      const patch = await onResponse(context);\n      if (patch) {\n        context = applyPatch(context, patch);\n      }\n    }\n\n    return context.result;\n  };\n\n  const createMethod = (method: METHODS) => {\n    return (url: string, options?: RequestOptions) =>\n      interceptor(method, url, options || {});\n  };\n\n  const get = createMethod(\"GET\");\n  const post = createMethod(\"POST\");\n  const put = createMethod(\"PUT\");\n  const delete_ = createMethod(\"DELETE\");\n  const patch = createMethod(\"PATCH\");\n  const options_ = createMethod(\"OPTIONS\");\n  const trace = createMethod(\"TRACE\");\n  const head = createMethod(\"HEAD\");\n  const custom = (url: string, method: string, options?: RequestOptions) =>\n    interceptor(method as METHODS, url, options || {});\n  const setBearerToken = (token: string) => {\n    instanceConfigWithDefaults.bearerToken = token;\n    instanceConfigWithDefaults.headers[\"Authorization\"] = `Bearer ${token}`;\n  };\n\n  return {\n    get,\n    post,\n    put,\n    delete: delete_,\n    patch,\n    options: options_,\n    trace,\n    head,\n    custom,\n    helpers: {\n      getConfig: () => instanceConfigWithDefaults,\n      setBearerToken,\n    },\n  };\n}\n"]}